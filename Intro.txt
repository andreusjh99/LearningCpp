Compiler and linker

First, compile.
The C++ compiler goes through each source code (.cpp) file
    in your program and does two things:
    1. Checks that your code follow the rules of C++.
    2. Translates your code into a machine language file
        called an object file (.o or .obj)
        If you had 3 .cpp files, the compiler would generate 3 object files.

Next, link
The linker now kicks in. It does three things:
1. Take all the object files generated by the compiler
    and combine them into a single executable program.

2. Apart from linking object files, it also links library files.
    A library file: a collection of precompiled code that has been "packaged" up for reuse in other prgrams.

    C++ core language is actually fairly small and concise.
    C++ also comes with an extensive library called the C++ Standard Library.
    One of the most commonly used parts is the iostream library.
    Almost every C++ program written utilises the standard library in some form,
    so it's very common for the standard library to get linked into your programs.
    You can also optionally link in other libraries.

3. Makes sure all cross-file dependencies are resolved properly.
    For eg. if you define something in one .cpp file, then use it in another .cpp file,
    the linker will connect the two together.

Once the linker finishes linking all the object files and libraries,
    you will have an executable file that you can then run.